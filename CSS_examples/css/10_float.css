/*                                      Позиционирование блоков. float */

/* float довольно косячный и устаревший, не стит использовать для чего либо кроме обтекания текстом(для чего он изначально и был придуман). Для остального лучше использовать flexbox и grid  */

/* Удаляем все отступы по умолчанию со всей страницы */
* { margin: 0; padding: 0; }
body { min-height: 1700px; }
/* Общие стили для блоков */
.block { width: 200px; height: 200px; margin: 20px;	}
p { font-size: 1.2rem; margin-left: 20px; margin-right: 20px; }
/* всякое */
hr { margin-top: 20px; margin-bottom: 20px}
h2 { text-align: center; }


/* Блочные объекты по умолчанию располагаются друг под другом вертикально(тк занимают 100% ширины экрана). При помощи float мы можем менять расположение блоков относительно друг друга и на странице в целом */

/* float-элемент вываливатся из потока "падает вниз" от своего положение и прижимается к заданному краю, если не указать ему ширину, то ужмется относительно контента если ему будет не хватать место изза других элементов в ряду в который ое "упал", строчные элементы находяшиеся с ним в одних рядах будут ужиматься и обтекать его, перенося то что не помещается на следующие строки */


/* Изменение расположения объектов при помощи свойства float, после чего блок будет позиционироваться с какой-либо стороны, а все дополнительные элементы будут обтекать его. Уместнее всего использовать float для обтекания картинки текстом но раньше при помощи него делалось все позиционирование */
#first_block {
	background: red;
	float: left; /* left(или right/none) - значение свойства float, означает что блок #first_block будет прижат к левой стороне и другие объекты его смогут обтекать справа, но для этого другим блокам тоже нужно добавить свойство float, а иначе они будут наслаиваться, а строчные объекты будут обтекать и так. Строчные объекты обтекают только те блоки, что находятся выше них */
}
#second_block {
	background: blue;
	float: left; /* Теперь оба блока позиционируются слева друг за другом(след относительно предыдущего на одной "линии") */
}
#third_block {
	background: green;
	float: right; /* Позиционируем 3й блок справа */
	/* clear: right;*/ /* Запрещаем позиционирование справа от этого блока */
}


/* Блоки с 'float' не участвуют в потоке документа, соответственно их высота не учитывается в расчете высоты материнского блока и макет ползет. Лучше прописать в материнский блок например 'overflow: hidden' или добавить пустой 'div' со стилем 'clear: both' в конце заголовка. 'Overflow: hidden' отменяет действие 'float' и все работает корректно. То же касается позиционирования 'Position: absolute' убирает блок из потока документа. */

/* Исправляем проблемы со свойством float у предыдущего блока(след блок без свойства float наложится на него). Размещаем пустой блок со стилем clear: both перед следующим блоком, запрещающий свойство float в обе стороны от себя */
#clear_block {
	clear: both; /* clear: - свойство clear необходимо для удаления действия float с определенной стороны.(удаляет обтекание объекта текстом, картинками и прочем с какой-либо стороны.)
	left - удаление обтекания с левой стороны;
	right - удаление обтекания с правой стороны;
	both - удаление обтекания с обеих сторон; none - значение по-умолчанию (обтекание со всех сторон). */
}
/* Теперь очередной float блок будет на новой линии */


/* При добавлении внутреннего блока в html коде, чтобы он корректно отображался ему тоже можно добавть float */
#four_block {
	background: yellow;
	float: right;
}
.block-m {
	width: 100px; height: 100px; margin: 10px;
	background: magenta;
	float: right;
}



/*                                   Меню сайта на основе списка при помощи float */

/* Вариант 1 простое меню */
#nav {
  list-style: none; /* убираем стили списков */
  display: block;   /* меняем тип объекта списка на блок(теперь это блок содержащий элементы списка) */
  float: left;
  width: 50%; margin-left: 25%;    /*  для центрирования */

  margin-bottom: 50px; text-align: center;
}
#nav li {
  display: inline;     /* меняем тип объекта всех элементов списка на строковый(чтоб они были в одну строку) */

  background: #fafafa; border: 1px solid silver; padding: 0 20px;
}
#nav li:not(:last-of-type) { /* все элементы списка кроме последнего */
  margin-right: 20px;
}
#nav li:hover { color: #fff; background: #333; border-color: #333; border-radius: 5px; } /* стили при наведении */


/* Вариант 2 меню с выпадающими элементами */
/* стили для вложенного списка */
#navbar ul{
	display: none; /* по умолчанию вложенный список будет неактивным, его не будет видно и он не будет обладать свойствами никакого типа объекта */
	position: absolute;
	top: 100%;

	background-color: #f90;
}
/* Основным моментом здесь является то, что при наведении мыши мы делаем вложенный список блоком.  */
#navbar li:hover ul { display: block; }
/* При помощи дополнительных стилей мы указываем чтобы список был в форме блоков и чтобы у него не было значков списка и прочих стилей. */
#navbar, #navbar ul{
	margin: 0; padding: 0;
	list-style-type: none; /* убираем стили списков из материнского и вложенного списков */
}
#navbar { height: 30px; background-color: #666; padding-left: 25px; min-width: 470px; margin-bottom: 50px; }
#navbar li { /* позиционируем элементы материнского списка друг за другом слева */
	float: left;
	position: relative;
	height: 100%;
}
#navbar li a {
	display: block;
	padding: 6px; width: 100px; color: #fff; text-decoration: none; text-align: center; /* Меняем визуал ссылок-блоков */
}
#navbar ul li { float: none; } /* Отменяем действие float для элементов внутреннего списка чятоб они отображались в столбик */
#navbar li:hover { background-color: #f90; }
#navbar ul li:hover { background-color: #666; }














/*  */
