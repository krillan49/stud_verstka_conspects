/*                                          CSS Grid: адаптивная верстка сайтов  */

/* CSS Grid можно назвать улучшенной версией FlexBox, ведь FlexBox позволяет работать лишь в одной мерности: либо создавать столбцы, либо создавать ряды. Сетки CSS позволяют делать больше, так как они работают в обеих мерностях одновременно. */

/* Алгоритм действий работы с сетками:
  1. Создаем один основной блок и помещаем в него другие блоки (секции);
  2. Добавляем к основному блоку свойство display: grid;
  3. Ко всем элементам основного блока теперь можно применять свойства сеток CSS;
Каждому блоку можно устанавливать ширину, высоту, его расположение. Блоки, которые создаются на основе сеток сразу имеют адаптивный дизайн, который подстраивает блоки под различные разрешения экранов. */

/*  https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Grid_Layout  - документация по всем свойствам сеток  CSS Grid */
/*  https://tpverstak.ru/grid/  - шпаргалка для тестирования свойств */

* {margin: 0; padding: 0;}

h1 {background-color: silver; margin-top: 10px; margin-bottom: 10px} /*  Заголовки */


.wrapper { /* основной материнский блок */
  display: grid; /* добавляем значение grid, теперь мы можем применить к блоку свойства сеток. Само значение grid никаких изменений не вносит, для них необходимо указать grid-свойства. */
  grid-template-columns: 70% 30%; /* grid-template-columns - свойство сеток, именяющее конфигурацию внутренних блоков на сетку и задающее сколько места будет занимать каждая из колонок в линии. Можно указывать в процентах и пикселях(обычно если нужны блоки не на всю ширину экрана) или фракциях. Количество значений задает количество колонок в одном ряду(можно задавать сколько угодно), соотв дальнейшие блоки будут располагаться в след рядах по столько же штук и с теми же размерами ширины. Если ширина экрана заполнена не полностью то остается пустое место. Высота задается автоматисчески в зависимости от контента внутри блоков, по самому большому */
  grid-column-gap: 1em; /* свойство похожее на margin задает вертикальные отступы между внутренними блоками. */
  grid-row-gap: 1em; /* горизонтальные отступы */
  grid-gap: 1em; /* и горизонтальные и вертикальные отступы */
}

.wrapper>div { padding: 1em; background-color: #eb7181; } /* стили для дочерних блоков */
.wrapper>div.light { padding: 1em; background-color: #edb1b9; } /* стили для дочернего блока light */


/*                                         Фракции; repeat(); minmax(); Вложенная сетка  */

.wrapper-2 { /* материнский блок - 2 */
  display: grid;

  /* grid-template-columns: 1fr 2fr 1fr; */ /* Наиболее удобным типом указания ширины колонок являются фракции(fr), тк при создании отступов никакие блоки не будут вылезать за ширину экрана. Фракции указываются в относительных(друг для друга) единицах/долях, все фракции в линии занимают всю линию. Количество так же задает колич блоков в линии. */
  grid-template-columns: repeat(3, 1fr); /* repeat() - метод позволяющий указать множество одинаковых фракций. Первое число в значениях это число блоков в линии, а второе их размер */

  grid-gap: 1em;

  /* grid-auto-rows: 150px; */ /* grid-auto-rows - указывает заданную высоту для всех блоков, которая не будет меняться относительно контента внутри, соотв он будет вылезать если размер будет превышен */
  grid-auto-rows: minmax(100px, auto); /* minmax() - функция задающая минимальную и максимальную высоту блоков в сетке. Тут первое значение это минимальный размер блока, а второе параметр auto увеличивающий размер блоков в линии в зависимости от размера контента в них */
}

.wrapper-2>div { padding: 1em; background-color: #e7a158; } /* стили для дочерних блоков */
.wrapper-2>div.light { padding: 1em; background-color: #f4c3a0; } /* стили для дочернего блока light */

.included { /* стили для вложенного материнского блока. Сетка в сетке */
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 1em;
  grid-auto-rows: 50px;
}
.included>div { padding: 1em; background-color: #d07a09;}


/*                                  Изменение размеров и расположения блоков по разным направлениям */

.wrapper-3 { /* материнский блок - 3 */
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  grid-gap: 1em;
  grid-auto-rows: minmax(100px, auto);
  justify-items: stretch; /* justify-items - свойство похожее на свойство флэксбокс, смещает/выравнивает блоки к вертикальной границе блоков(заданные фракциями) до размера позволяющего разместить в них котент(не выравнивается по макс блоку). start - смещается влево; end - вправо; center - к центру;  stretch - значение по умолчанию, блоки растянуты на весь рамер заданный фракцией */
  align-items: stretch; /* align-items - смещает/выравнивает блоки к горизонтальной границе заданной высотой блока в зависимости от контента. start - смещается вверх; end - смещается вниз; center - к центру; stretch - значение по умолчанию, блоки растянуты на весь рамер заданный минимальной высотой или размером контента  */
}

.wrapper-3>div { padding: 1em; background-color: #7853d5; } /* стили для дочерних блоков */
.wrapper-3>div.light { padding: 1em; background-color: #a79ac7; } /* стили для дочерних блоков light */

/* Стили смещения границ можно применять к отдельным внутренним блокам но уже в виде align-self и justify-self */
.box1 {
  justify-self: end; /* justify-self - как justify-items, но смещает конкретный блок к вертикальной границе */
  align-self: start; /* align-self - аналогично align-items но смещает только конкретный блок к горизонтальной границе */
}
.box3 {justify-self: center; align-self: center;}

/*  Растягивание блоков на несколько элементов изначальной сетки и перемена блоков местами. Для удобства можно представить сетку разделенную на линии со внешними линиями на границе крайних блоков, которые будут считаться первыми по горизонтали и вертикали, соотв линия между 1м и 2м блоком будет 2я итд */
.box4 {
  grid-column: 1/3; /* свойство указывает размер блока по вертикальным линиям сетки(те по горизонтали). В значении указываем конечную и начальную линии через слэш. Тут наш блок будет начинаться с 1й линии те с левого края экрана и до 3й линии, тоесть занимать место изначльных двух блоков. Блок не только занимает позицию но и закрепляется на ней и не может быть смещен. Остальные блоки смещаются/меняют позиции в сетке по порядку */
  grid-row: 2/4; /* аналогично предыдущему только по вертикали */
}
.box5 {
  grid-column: 3; /* при помощи одного стартового значения просто закрепляем блок на его позиции */
  grid-row: 2/6;
}
.box6 { /* применяем теже свойства чтоб поменять блоки 6 и 7 местами */
  grid-column: 2/3;
  grid-row: 4; /* Важно размещать по границам изначальной сетки а не размерам новых блоков которые стали занимать больше линий */
}

/* Расположение одного блока поверх другого при помощи тех же свойств, просто указав линии занимаемые другим закрепленным блоком */
.box7 {
  grid-column: 1; /* закрепляем по другому направлению, чтобы блок наложился а не сместился */
  grid-row: 3/5; /* теперь блок 7 залез на блок выше */
}
/* Каждое из свойств(grid-column и grid-row) закрепляет положение блоков только на одном направлении соотв если нужно чтоб они не смещались на обоих направлениях нужно указать оба свойства. */

/* Комбинация justify-self align-self и grid-column grid-row */
.box12 {
  justify-self: end;
  grid-column: 3;
  grid-row: 5/7;
}

















/*  */
