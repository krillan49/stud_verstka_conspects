/*                                       Единицы измерения в CSS */

/* Абсолютная единица - не зависит от значений других свойств. Ее можно назвать еще фиксированной или окончательной. */
/* Относительная единица - зависит от того или иного значения других свойств. */

/* Браузер в итоге все значения пересчитывает в пиксели. */

/* Использование единиц измерения зависит от конкретной ситуации. Но в целом чаще(лучше) всего используются: rem - для размеров шрифта(при этом не указывая размер для тега html, позволяя пользователю менять настройки браузера); em - лучшая единица для медиазапросов(https://zellwk.com/blog/media-query-units/), а так же для тех свойств которые мы хотим привязать к текущему размеру шрифта; px - для обводки; %(или части указывется цифра без значка раная процентам поделить на 100) для различных единиц(например line-height), позиционирования объектов, работы со скролом и "резиновых" конструкций */

/* Формулы конвертации значений из PX в относительные единицы:
из PX в EM - значение в PX поделить на значение font-size (текущее или унаследованное)
из PX в REM - значение в PX поделить на значение font-size указанное для тега HTML (если не указано то на 16)
из PX в % - значение в PX поделить на значение относительно которого высчитывается процент и умножить на 100 */


:root { /* Селектор псевдокласса корневого узла(корневого тега html) */
  font-size: 16px; /* так делать не нужно, чтобы пользователь мог поменять размер шрифта в настройках браузера */
}
/* html { ... } */  /* аналог */

body { /* Для наглядности можно менять значения тут чтобы смотреть на какие единицы влияет body */
  font-size: 16px;
}



/*                                       A. Единицы измерения для текста(на примере font-size) */

/* Общие стили для визуала */
h1 { background-color: silver;}
.box { border-bottom: 2px solid #ccc; padding: 30px; } /*   */
.box h2 { font-size: 50px; }
.box:nth-child(2n) { background: #f0f0f0; }


/* Большинство браузеров по умолчанию имеет значение font-size: 16px (и в body и в корневом теге html). Соотв все относительные величины будут работать от этого значения если их предварительно не изменить (в body и/или в корневом теге html) */

/* Свойство font-size наследуется потомками */


/*             1. Пиксели   px.  Пиксели это базовая, абсолютная и окончательная единица измерения. Пиксель css это тот что составляет разрешение монитора(тот пиксель что мы видем на экране). Как правило, в макетах дизайна мы видим размеры именно в пикселях. Поэтому, используя эту единицу мы легко можем переносить данные в код с точностью пиксель перфект(Это когда макетные размеры совпадают с версткой на все 100%). Пиксели могут быть дробными */
.box-px .text-1 { font-size: 16px; } /* устанавливаем размер текста на 16 пикселей */
.box-px .text-2 { font-size: 8px; } /* устанавливаем размер текста на 8 пикселей */
.box-px .text-3 { font-size: 32px; } /* устанавливаем размер текста на 32 пикселя */
.box-px .text-3 .text-4 { color: black } /* наследуется 32px из родительского объекта .text-3 */
.box-px .text-3 .text-5 { font-size: 20px; } /* ставим 10px  и родительские установки из объекта .text-3 не влияют на это */
/* При использовании пикселей вне зависимости от вложенности или еще чегото, если мы указываем конкретное значение, то его и получим в результате */
/* Минусы: добавляют лишней работы при адаптиве; сильно снижает доступность верстки тк запрещает пользователю менять настройки браузера(размер шрифта по умолчанию) */


/*             2. Проценты   %.  Относительная единица. Можно указывать дробные числа, например 10.5%. Разные CSS свойства вычисляют процент относительно разных значений:
 Ширина width - относительно ширины родительного элемента
 Высота height - относительно высоты родительного элемента, но только если у него задана высота либо это флекс или грид элемент.
 При относительном позиционировании (position: relative; + top left bottom right) нужны те же условия.
 Для абсолютно позиционированных объектов - относительно высоты ближайшего по уровню родительского элемента, которому указан position: relative;. При этом, задавать высоту родителю не обязательно.
 padding и margin - относительно ширины родительного элемента, даже если задаются вертикальные отступы.
 transform: translate(x, y) - относительно ширины \ высоты самого объекта к которому применено свойство.
 font-size и line-height - относительно размера свойства font-size */
.box-percent .text-1 { font-size: 100%; } /* 16px(из родительского тега)*1.0 == 16px */
.box-percent .text-2 { font-size: 50%; } /* 16px*0.5 == 8px */
.box-percent .text-3 { font-size: 200%; } /* 16px*2.0 == 32px */

/*  %  и  вложенность */
.box-percent p { font-size: 100%;} /* Браузер пересчитывает значение на значение по умолчанию 16px которое и равно 100% */
.box-percent p>span { font-size: 50%; } /* дочерние span(а так же вложенные в них по наследованию) приобрели значение 8px(==100%*0.5 ==16px*0.5)  */
.box-percent p>span>span { font-size: 200%; } /* соотв от родителя имеем 100%==8px и получаем 8px*2==16px(а не 32 как выше) */


/*           3. Em. Относительная единица. Размер формируется относительно текущего или унаследованного размера шрифта (font-size). 1em равен значению font-size. Удобно использовать для того чтобы менять множество различных значений относительно body(или другого материнского блока), просто изменив значение font-size в самом body, вместо того чтобы менять множество значений в px. Но дополнительная сложность производить вычисления, переводя данные из макета из пикселей(100px==6.25em 100/16==6.25) */
.box-em .text-1 { font-size: 1em; } /* 16px(наследует у font-size из тега body)*1 == 16px */
.box-em .text-2 { font-size: 0.5em; } /* 16px(body)*0.5 == 8px */
.box-em .text-3 { font-size: 2em; } /* 16px(body)*2.0 == 32px */
.box-em .text-3 .text-4 { color: black; } /* 32px(наследует у font-size из родительского тега .text-3) */
.box-em .text-3 .text-5 { font-size: 0.8em; } /* 32px(.text-3)*0.8 == 25.6px */

/*  Em  и  вложенность(минус) */
.box-em ul { font-size: 1.2em; } /* так каждая последующая вложенность(вложенные ul ul...) изменяется от значения унаследованного font-size от тега родителя c тем же селектором ul и потом еще и меняет свое значение на 1.2em. Это можно исправить прописав "... ul ul { font-size: 1em; }" , но этот способ не является лучим и лучше просто использовать Rem вместо Em */


/*          4. Rem.(Root em, тоесть корневой em) Относительная единица. Размер формируется относительно размера шрифта (font-size) в значении основного корневого тега <html>(можно изменить по умолчанию для всех Rem только через селектор псевдокласса :root) или(если там не прописано) браузера по умолчанию. 1rem равен значению font-size в теге <html> или браузера по умолчанию. Не относительна значению тега body(не меняется от изменения там значения) или какихто других тегов, так же не влияет на все остальные значения, в том числе и при вложенности */
.box-rem .text-1 { font-size: 1rem; } /* 16px(из корневого значения html)*1 == 16px */
.box-rem .text-2 { font-size: 0.5rem; } /* 16px*0.5 == 8px */
.box-rem .text-3 { font-size: 2rem; } /* 16px*2.0 == 32px */
.box-rem .text-3 .text-4 { color: black; } /* 32px(наследует у font-size из родительского тега .text-3) */
.box-rem .text-3 .text-5 { font-size: 0.8rem; } /* 16px(root)*0.8 == 12.8px при установке значения в rem не учитывает унаследованный у .text-3 font-size и берет его из тега html */

/*  Rem  и  вложенность */
.box-rem ul { font-size: 1.2rem; } /* при использовании rem все вложенности с одинаковыми селекторами будут иметь одинаковое значение относительное значению из корневого тега */


/*         5. Использование Селектор псевдокласса корневого узла, Em и Rem при работе с медиазапросами и подсчет значений */
/*:root {
  /*font-size: 0.875em;*/ /*==14px */
  /*font-size: 1em;*/
/*}*/
.box-em-rm-media h3 { font-size: 1.71rem;} /* (24px/14px)==1.71rem==24px */
@media (max-width:768px) { /* но лучше пересчитать тут пиксели в em */
  :root { font-size: 1.2rem; } /* так мы поменяем все значения всех свойств в rem для экранов < 768px на 16px*1.2 вне зависимости от ранее установленного root в em. Так же вместо root можно использовать другие нужные нам блоки */
}


/*         6. VW/VH. v в vh vw vmax и vmin - означает viewport(область просмотра/окно браузера). vh==1/100 высоты области просмотра(высоты экрана/монитора/окна браузера), соотв его значение меняется только от изменения высоты вьюпорта; vw==1/100 ширины области просмотра, соотв его значение меняется только от изменения ширины вьюпорта; vmin==1/100 наименьшего значения из ширины и высоты; vmax==1/100 наибольшего значения из ширины и высоты; vmax и vmin не всегда хорошо поддерживаются браузерами */
.box-vw-vh .text-1 { font-size: 2vw; } /* если ширина экрана 1200px то элемент примет значение 24px(1200*0.02) */
.box-vw-vh .text-2 { font-size: 2vh; }
.box-vw-vh .text-3 { font-size: 1.5vmax; }
.box-vw-vh .text-4 { font-size: 2.5vmin; }
.box-vw-vh .text-4 .text-5 { color: black; } /* Наследуется font-size:2.5vmin */
.box-vw-vh .text-4 .text-6 { font-size: 1.8vh; } /* при переназначении не учитывает наследование */

/* vh и vw можно применять как в высоте так и к ширине, чтоб например взять ширину долей от высоты */


/*        7.  FR, EX, CH, MM, CM, PT, PC - прочие единицы
 FR - единица измерения в модуле GRID. Указавает какую часть (фрагмент) должен занимать тот или иной грид-элемент. Значения могут быть дробными, например 0.5fr. Отлично работает с отступами gap
 EX - единица работающая относительно размера латинского символа "x" (прописная). Используется редко
 CH - единица работающая относительно размера символа "0" (ноль). Используется редко
Единицы MM, CM, PT, PC являются производными от пикселя и уже не используются */



/*                                       B. Единицы измерения для: width, height, padding, margin, border-radius */

/* padding em */
.block-em {
  background-color: #ff0;
  font-size: 20px;
  padding: 2em; /* тут 2em будет относителен значению font-size, те 40px(20px*2) */
}


/* buttons em size */
.btn {
  padding: 1em; /* теперь для кнопки с font-size: 14px и padding будет равен 14px; а для кнопки с font-size: 20px соотв 20px */
  border-radius: 1em; /* аналогично и со скруглениями, значения будут соотв разным font-size для разных кнопок */
  background-color: #ccc;
  border: 1px solid #ccc;
  text-transform: uppercase;
}
.btn-xs { font-size: 14px; } /* Теперь при помощи font-size можно управлять всеми размерами кнопок */
.btn-lg { font-size: 20px; }


/* text padding margin em */
.text {
  font-size: 1.2em; /* 16px*1.2==19.2px */
  /* так как локально указан font-size(если в em то от body, если в rem  то от корневого тега) по нему будет идти перерасчет для padding и margin если указать их в em */
  padding: 1.2em; /* 19.2px*1.2==23.04px */
  margin: 1.2em; /* 19.2px*1.2==23.04px */
  background-color: #ccc;
}

/* vmax vmin */
.kvadrat {
  width: 30vmin; /* значение будет браться(тут 30%) от меньшей из сторон экрана, соотв если разрешение изменится и другая сторона станет меньшей то значение будет браться уже от нее */
  height: 30vmin;
  background-color: magenta;
}












/*  */
